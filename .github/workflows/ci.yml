name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ secrets.DOCKER_USERNAME }}/koronet-web-server:latest

    - name: Run tests
      run: echo "No tests configured yet. Add your test commands here."

    - name: Push Docker image to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/koronet-web-server:latest

    - name: Build and Push Prometheus Docker image to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: ./terraform
        file: ./terraform/Dockerfile.prometheus
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/koronet-prometheus:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 # Replace with your desired AWS region

    - name: Download and install Amazon ECS CLI
      run: |
        sudo curl -o /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
        sudo chmod +x /usr/local/bin/ecs-cli
    
    - name: Deploy to ECS
      run: |
        # Placeholder for ECS deployment commands
        echo "Deploying to ECS cluster: your-ecs-cluster-name"
        echo "Service: your-ecs-service-name"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/koronet-web-server:latest"
        # Example commands (replace with actual ECS CLI or AWS CLI commands)
        # ecs-cli compose --project-name koronet-web-server service up --create-log-groups --cluster-config your-ecs-cluster-name
        # aws ecs update-service --cluster your-ecs-cluster-name --service your-ecs-service-name --force-new-deployment \
        #   --task-definition $(aws ecs describe-task-definition --task-definition your-task-definition-family --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "ECS deployment commands go here."

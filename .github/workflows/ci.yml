name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ secrets.DOCKER_USERNAME }}/koronet-web-server:latest

    - name: Run tests
      run: python -m unittest discover

    - name: Push Docker image to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/koronet-web-server:latest

    - name: Build and Push Prometheus Docker image to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: ./terraform
        file: ./terraform/Dockerfile.prometheus
        platforms: linux/amd64 # Explicitly specify platform
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/koronet-prometheus:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 # Replace with your desired AWS region

    - name: Download and install Amazon ECS CLI
      run: |
        # No longer needed as we're using AWS CLI directly
        echo "Skipping Amazon ECS CLI installation."
    
    - name: Deploy to ECS
      run: |
        echo "Deploying to ECS cluster: koronet-ecs-cluster"
        
        # Deploy Web Server Service
        WEB_SERVER_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition koronet-web-server-task --query 'taskDefinition.taskDefinitionArn' --output text)
        aws ecs update-service --cluster koronet-ecs-cluster --service koronet-web-server-service --task-definition $WEB_SERVER_TASK_DEFINITION_ARN --force-new-deployment
        echo "Web Server Service deployed."

        # Deploy PostgreSQL Service
        POSTGRESQL_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition koronet-postgresql-task --query 'taskDefinition.taskDefinitionArn' --output text)
        aws ecs update-service --cluster koronet-ecs-cluster --service koronet-postgresql-service --task-definition $POSTGRESQL_TASK_DEFINITION_ARN --force-new-deployment
        echo "PostgreSQL Service deployed."

        # Deploy Redis Service
        REDIS_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition koronet-redis-task --query 'taskDefinition.taskDefinitionArn' --output text)
        aws ecs update-service --cluster koronet-ecs-cluster --service koronet-redis-service --task-definition $REDIS_TASK_DEFINITION_ARN --force-new-deployment
        echo "Redis Service deployed."

        # Deploy Prometheus Service
        PROMETHEUS_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition koronet-prometheus-task-new --query 'taskDefinition.taskDefinitionArn' --output text) # Note: Using prometheus-task-new
        aws ecs update-service --cluster koronet-ecs-cluster --service koronet-prometheus-service --task-definition $PROMETHEUS_TASK_DEFINITION_ARN --force-new-deployment
        echo "Prometheus Service deployed."

        # Deploy Grafana Service
        GRAFANA_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition koronet-grafana-task --query 'taskDefinition.taskDefinitionArn' --output text)
        aws ecs update-service --cluster koronet-ecs-cluster --service koronet-grafana-service --task-definition $GRAFANA_TASK_DEFINITION_ARN --force-new-deployment
        echo "Grafana Service deployed."
